#############################################################################
# Makefile for building: LinQedIn
# Generated by qmake (2.01a) (Qt 4.8.6) on: gio gen 1 22:17:48 2015
# Project:  LinQedIn.pro
# Template: app
# Command: /usr/lib/x86_64-linux-gnu/qt4/bin/qmake -o Makefile LinQedIn.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -m64 -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -m64 -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++-64 -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I. -ITEST -I.
LINK          = g++
LFLAGS        = -m64 -Wl,-O1
LIBS          = $(SUBLIBS)  -L/usr/lib/x86_64-linux-gnu -lQtGui -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/lib/x86_64-linux-gnu/qt4/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = attivita.cpp \
		data.cpp \
		db.cpp \
		esperienza_professionale.cpp \
		finestraprincipale.cpp \
		lingua.cpp \
		main.cpp \
		smart_utente.cpp \
		titolo_di_studio.cpp \
		utente.cpp \
		utente_a_pagamento.cpp \
		utente_basic.cpp \
		utente_business.cpp \
		utente_executive.cpp \
		utente_gratis.cpp \
		TEST/test.cpp \
		TEST/test_data.cpp \
		TEST/test_esperienza.cpp \
		TEST/test_lingua.cpp \
		TEST/test_manager.cpp moc_finestraprincipale.cpp
OBJECTS       = attivita.o \
		data.o \
		db.o \
		esperienza_professionale.o \
		finestraprincipale.o \
		lingua.o \
		main.o \
		smart_utente.o \
		titolo_di_studio.o \
		utente.o \
		utente_a_pagamento.o \
		utente_basic.o \
		utente_business.o \
		utente_executive.o \
		utente_gratis.o \
		test.o \
		test_data.o \
		test_esperienza.o \
		test_lingua.o \
		test_manager.o \
		moc_finestraprincipale.o
DIST          = /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/shared.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		LinQedIn.pro
QMAKE_TARGET  = LinQedIn
DESTDIR       = 
TARGET        = LinQedIn

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: LinQedIn.pro  /usr/share/qt4/mkspecs/linux-g++-64/qmake.conf /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/shared.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib/x86_64-linux-gnu/libQtGui.prl \
		/usr/lib/x86_64-linux-gnu/libQtCore.prl
	$(QMAKE) -o Makefile LinQedIn.pro
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/common/gcc-base.conf:
/usr/share/qt4/mkspecs/common/gcc-base-unix.conf:
/usr/share/qt4/mkspecs/common/g++-base.conf:
/usr/share/qt4/mkspecs/common/g++-unix.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/release.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/shared.prf:
/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib/x86_64-linux-gnu/libQtGui.prl:
/usr/lib/x86_64-linux-gnu/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -o Makefile LinQedIn.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/LinQedIn1.0.0 || $(MKDIR) .tmp/LinQedIn1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/LinQedIn1.0.0/ && $(COPY_FILE) --parents attivita.h data.h db.h esperienza_professionale.h finestraprincipale.h lingua.h smart_utente.h titolo_di_studio.h utente.h utente_a_pagamento.h utente_basic.h utente_business.h utente_executive.h utente_gratis.h TEST/test.h TEST/test_data.h TEST/test_esperienza.h TEST/test_lingua.h TEST/test_manager.h .tmp/LinQedIn1.0.0/ && $(COPY_FILE) --parents attivita.cpp data.cpp db.cpp esperienza_professionale.cpp finestraprincipale.cpp lingua.cpp main.cpp smart_utente.cpp titolo_di_studio.cpp utente.cpp utente_a_pagamento.cpp utente_basic.cpp utente_business.cpp utente_executive.cpp utente_gratis.cpp TEST/test.cpp TEST/test_data.cpp TEST/test_esperienza.cpp TEST/test_lingua.cpp TEST/test_manager.cpp .tmp/LinQedIn1.0.0/ && (cd `dirname .tmp/LinQedIn1.0.0` && $(TAR) LinQedIn1.0.0.tar LinQedIn1.0.0 && $(COMPRESS) LinQedIn1.0.0.tar) && $(MOVE) `dirname .tmp/LinQedIn1.0.0`/LinQedIn1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/LinQedIn1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_finestraprincipale.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_finestraprincipale.cpp
moc_finestraprincipale.cpp: finestraprincipale.h
	/usr/lib/x86_64-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) finestraprincipale.h -o moc_finestraprincipale.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

attivita.o: attivita.cpp attivita.h \
		data.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o attivita.o attivita.cpp

data.o: data.cpp data.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o data.o data.cpp

db.o: db.cpp db.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o db.o db.cpp

esperienza_professionale.o: esperienza_professionale.cpp esperienza_professionale.h \
		data.h \
		attivita.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o esperienza_professionale.o esperienza_professionale.cpp

finestraprincipale.o: finestraprincipale.cpp finestraprincipale.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o finestraprincipale.o finestraprincipale.cpp

lingua.o: lingua.cpp lingua.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o lingua.o lingua.cpp

main.o: main.cpp finestraprincipale.h \
		data.h \
		TEST/test_manager.h \
		TEST/test.h \
		lingua.h \
		esperienza_professionale.h \
		attivita.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

smart_utente.o: smart_utente.cpp smart_utente.h \
		utente.h \
		esperienza_professionale.h \
		data.h \
		attivita.h \
		lingua.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o smart_utente.o smart_utente.cpp

titolo_di_studio.o: titolo_di_studio.cpp titolo_di_studio.h \
		attivita.h \
		data.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o titolo_di_studio.o titolo_di_studio.cpp

utente.o: utente.cpp utente.h \
		esperienza_professionale.h \
		data.h \
		attivita.h \
		lingua.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o utente.o utente.cpp

utente_a_pagamento.o: utente_a_pagamento.cpp utente_a_pagamento.h \
		utente.h \
		esperienza_professionale.h \
		data.h \
		attivita.h \
		lingua.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o utente_a_pagamento.o utente_a_pagamento.cpp

utente_basic.o: utente_basic.cpp utente_basic.h \
		utente_gratis.h \
		utente.h \
		esperienza_professionale.h \
		data.h \
		attivita.h \
		lingua.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o utente_basic.o utente_basic.cpp

utente_business.o: utente_business.cpp utente_business.h \
		utente_a_pagamento.h \
		utente.h \
		esperienza_professionale.h \
		data.h \
		attivita.h \
		lingua.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o utente_business.o utente_business.cpp

utente_executive.o: utente_executive.cpp utente_executive.h \
		utente_a_pagamento.h \
		utente.h \
		esperienza_professionale.h \
		data.h \
		attivita.h \
		lingua.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o utente_executive.o utente_executive.cpp

utente_gratis.o: utente_gratis.cpp utente_gratis.h \
		utente.h \
		esperienza_professionale.h \
		data.h \
		attivita.h \
		lingua.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o utente_gratis.o utente_gratis.cpp

test.o: TEST/test.cpp TEST/test.h \
		data.h \
		lingua.h \
		esperienza_professionale.h \
		attivita.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o test.o TEST/test.cpp

test_data.o: TEST/test_data.cpp TEST/test_data.h \
		TEST/test.h \
		data.h \
		lingua.h \
		esperienza_professionale.h \
		attivita.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o test_data.o TEST/test_data.cpp

test_esperienza.o: TEST/test_esperienza.cpp TEST/test_esperienza.h \
		TEST/test.h \
		data.h \
		lingua.h \
		esperienza_professionale.h \
		attivita.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o test_esperienza.o TEST/test_esperienza.cpp

test_lingua.o: TEST/test_lingua.cpp TEST/test_lingua.h \
		TEST/test.h \
		data.h \
		lingua.h \
		esperienza_professionale.h \
		attivita.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o test_lingua.o TEST/test_lingua.cpp

test_manager.o: TEST/test_manager.cpp TEST/test_manager.h \
		TEST/test.h \
		data.h \
		lingua.h \
		esperienza_professionale.h \
		attivita.h \
		TEST/test_data.h \
		TEST/test_lingua.h \
		TEST/test_esperienza.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o test_manager.o TEST/test_manager.cpp

moc_finestraprincipale.o: moc_finestraprincipale.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_finestraprincipale.o moc_finestraprincipale.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

